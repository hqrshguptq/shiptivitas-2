From 4fd0e1b536a53719d97a92650ad405789aa933c1 Mon Sep 17 00:00:00 2001
From: HARSH GUPTA <hgupta@ma.iitr.ac.in>
Date: Wed, 5 Aug 2020 06:44:41 +0530
Subject: [PATCH] database update on user moves

---
 package-lock.json |  41 +++++++++----
 server.js         | 145 ++++++++++++++++++++++++++++++++++++----------
 2 files changed, 144 insertions(+), 42 deletions(-)

diff --git a/package-lock.json b/package-lock.json
index 9719cfc..c15142f 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -2483,7 +2483,8 @@
         "ansi-regex": {
           "version": "2.1.1",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "aproba": {
           "version": "1.2.0",
@@ -2504,12 +2505,14 @@
         "balanced-match": {
           "version": "1.0.0",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "brace-expansion": {
           "version": "1.1.11",
           "bundled": true,
           "dev": true,
+          "optional": true,
           "requires": {
             "balanced-match": "^1.0.0",
             "concat-map": "0.0.1"
@@ -2524,17 +2527,20 @@
         "code-point-at": {
           "version": "1.1.0",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "concat-map": {
           "version": "0.0.1",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "console-control-strings": {
           "version": "1.1.0",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "core-util-is": {
           "version": "1.0.2",
@@ -2651,7 +2657,8 @@
         "inherits": {
           "version": "2.0.3",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "ini": {
           "version": "1.3.5",
@@ -2663,6 +2670,7 @@
           "version": "1.0.0",
           "bundled": true,
           "dev": true,
+          "optional": true,
           "requires": {
             "number-is-nan": "^1.0.0"
           }
@@ -2677,6 +2685,7 @@
           "version": "3.0.4",
           "bundled": true,
           "dev": true,
+          "optional": true,
           "requires": {
             "brace-expansion": "^1.1.7"
           }
@@ -2684,12 +2693,14 @@
         "minimist": {
           "version": "0.0.8",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "minipass": {
           "version": "2.3.5",
           "bundled": true,
           "dev": true,
+          "optional": true,
           "requires": {
             "safe-buffer": "^5.1.2",
             "yallist": "^3.0.0"
@@ -2708,6 +2719,7 @@
           "version": "0.5.1",
           "bundled": true,
           "dev": true,
+          "optional": true,
           "requires": {
             "minimist": "0.0.8"
           }
@@ -2788,7 +2800,8 @@
         "number-is-nan": {
           "version": "1.0.1",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "object-assign": {
           "version": "4.1.1",
@@ -2800,6 +2813,7 @@
           "version": "1.4.0",
           "bundled": true,
           "dev": true,
+          "optional": true,
           "requires": {
             "wrappy": "1"
           }
@@ -2885,7 +2899,8 @@
         "safe-buffer": {
           "version": "5.1.2",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "safer-buffer": {
           "version": "2.1.2",
@@ -2921,6 +2936,7 @@
           "version": "1.0.2",
           "bundled": true,
           "dev": true,
+          "optional": true,
           "requires": {
             "code-point-at": "^1.0.0",
             "is-fullwidth-code-point": "^1.0.0",
@@ -2940,6 +2956,7 @@
           "version": "3.0.1",
           "bundled": true,
           "dev": true,
+          "optional": true,
           "requires": {
             "ansi-regex": "^2.0.0"
           }
@@ -2983,12 +3000,14 @@
         "wrappy": {
           "version": "1.0.2",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         },
         "yallist": {
           "version": "3.0.3",
           "bundled": true,
-          "dev": true
+          "dev": true,
+          "optional": true
         }
       }
     },
diff --git a/server.js b/server.js
index 7ba16d7..cef3527 100644
--- a/server.js
+++ b/server.js
@@ -1,21 +1,23 @@
-import express from 'express';
-import Database from 'better-sqlite3';
+import Database from "better-sqlite3";
+import express from "express";
 
 const app = express();
 
 app.use(express.json());
 
-app.get('/', (req, res) => {
-  return res.status(200).send({'message': 'SHIPTIVITY API. Read documentation to see API docs'});
+app.get("/", (req, res) => {
+  return res.status(200).send({
+    message: "SHIPTIVITY API. Read documentation to see API docs",
+  });
 });
 
 // We are keeping one connection alive for the rest of the life application for simplicity
-const db = new Database('./clients.db');
+const db = new Database("./clients.db");
 
 // Don't forget to close connection when server gets terminated
 const closeDb = () => db.close();
-process.on('SIGTERM', closeDb);
-process.on('SIGINT', closeDb);
+process.on("SIGTERM", closeDb);
+process.on("SIGINT", closeDb);
 
 /**
  * Validate id input
@@ -26,25 +28,27 @@ const validateId = (id) => {
     return {
       valid: false,
       messageObj: {
-      'message': 'Invalid id provided.',
-      'long_message': 'Id can only be integer.',
+        message: "Invalid id provided.",
+        long_message: "Id can only be integer.",
       },
     };
   }
-  const client = db.prepare('select * from clients where id = ? limit 1').get(id);
+  const client = db
+    .prepare("select * from clients where id = ? limit 1")
+    .get(id);
   if (!client) {
     return {
       valid: false,
       messageObj: {
-      'message': 'Invalid id provided.',
-      'long_message': 'Cannot find client with that id.',
+        message: "Invalid id provided.",
+        long_message: "Cannot find client with that id.",
       },
     };
   }
   return {
     valid: true,
   };
-}
+};
 
 /**
  * Validate priority input
@@ -55,34 +59,41 @@ const validatePriority = (priority) => {
     return {
       valid: false,
       messageObj: {
-      'message': 'Invalid priority provided.',
-      'long_message': 'Priority can only be positive integer.',
+        message: "Invalid priority provided.",
+        long_message: "Priority can only be positive integer.",
       },
     };
   }
   return {
     valid: true,
-  }
-}
+  };
+};
 
 /**
  * Get all of the clients. Optional filter 'status'
  * GET /api/v1/clients?status={status} - list all clients, optional parameter status: 'backlog' | 'in-progress' | 'complete'
  */
-app.get('/api/v1/clients', (req, res) => {
+app.get("/api/v1/clients", (req, res) => {
   const status = req.query.status;
   if (status) {
     // status can only be either 'backlog' | 'in-progress' | 'complete'
-    if (status !== 'backlog' && status !== 'in-progress' && status !== 'complete') {
+    if (
+      status !== "backlog" &&
+      status !== "in-progress" &&
+      status !== "complete"
+    ) {
       return res.status(400).send({
-        'message': 'Invalid status provided.',
-        'long_message': 'Status can only be one of the following: [backlog | in-progress | complete].',
+        message: "Invalid status provided.",
+        long_message:
+          "Status can only be one of the following: [backlog | in-progress | complete].",
       });
     }
-    const clients = db.prepare('select * from clients where status = ?').all(status);
+    const clients = db
+      .prepare("select * from clients where status = ?")
+      .all(status);
     return res.status(200).send(clients);
   }
-  const statement = db.prepare('select * from clients');
+  const statement = db.prepare("select * from clients");
   const clients = statement.all();
   return res.status(200).send(clients);
 });
@@ -91,13 +102,15 @@ app.get('/api/v1/clients', (req, res) => {
  * Get a client based on the id provided.
  * GET /api/v1/clients/{client_id} - get client by id
  */
-app.get('/api/v1/clients/:id', (req, res) => {
-  const id = parseInt(req.params.id , 10);
+app.get("/api/v1/clients/:id", (req, res) => {
+  const id = parseInt(req.params.id, 10);
   const { valid, messageObj } = validateId(id);
   if (!valid) {
     res.status(400).send(messageObj);
   }
-  return res.status(200).send(db.prepare('select * from clients where id = ?').get(id));
+  return res
+    .status(200)
+    .send(db.prepare("select * from clients where id = ?").get(id));
 });
 
 /**
@@ -114,23 +127,93 @@ app.get('/api/v1/clients/:id', (req, res) => {
  *      priority (optional): integer,
  *
  */
-app.put('/api/v1/clients/:id', (req, res) => {
-  const id = parseInt(req.params.id , 10);
+app.put("/api/v1/clients/:id", (req, res) => {
+  const id = parseInt(req.params.id, 10);
   const { valid, messageObj } = validateId(id);
   if (!valid) {
     res.status(400).send(messageObj);
   }
 
   let { status, priority } = req.body;
-  let clients = db.prepare('select * from clients').all();
-  const client = clients.find(client => client.id === id);
+  let clients = db.prepare("select * from clients").all();
+  const client = clients.find((client) => client.id === id);
 
   /* ---------- Update code below ----------*/
+  if (priority) {
+    const cli = db
+      .prepare(
+        "select * from clients where status = ? and priority = ? limit 1"
+      )
+      .get([status, priority]);
+
+    if (!cli) {
+      //priority doesn't exist yet
+      const stmt = db.prepare("update clients set priority = ? where id = ?");
+      stmt.run([priority, client.id]);
+    } else if (status === client.status) {
+      //same swimlane
+      if (priority < client.priority) {
+        const increment = db.prepare(
+          "update clients set priority = priority + 1 where priority >= ? and priority < ?"
+        );
+        increment.run([priority, client.priority]);
+      } else if (priority > client.priority) {
+        const decrement = db.prepare(
+          "update clients set priority = priority - 1 where priority <= ? and priority > ?"
+        );
+        decrement.run([priority, client.priority]);
+      }
+      const stmt = db.prepare("update clients set priority = ? where id = ?");
+      stmt.run([priority, client.id]);
+    } else {
+      //moving to different swimlane
+      //take sibling priority and increment all above
+      const increment = db.prepare(
+        "update clients set priority = priority + 1 where priority >= ? and status = ?"
+      );
+      increment.run([priority, status]);
+
+      //decrement all priorities above client.priority
+      const decrement = db.prepare(
+        "update clients set priority = priority - 1 where priority > ? and status = ?"
+      );
+      decrement.run([client.priority, client.status]);
+
+      const takeSib = db.prepare(
+        "update clients set priority = ? where id = ?"
+      );
+      takeSib.run([priority, client.id]);
+    }
+  } else {
+    const max = db
+      .prepare(
+        "select * from clients where priority= 1 + (select max(priority) from clients where status = ?)"
+      )
+      .get([status]);
+    const setMax = db.prepare("update clients set priority = ? where id = ?");
+
+    //decrement all priorities above client.priority
+    const decrement = db.prepare(
+      "update clients set priority = priority - 1 where priority > ? and status = ?"
+    );
+    decrement.run([client.priority, client.status]);
+
+    if (max) {
+      setMax.run([max.priority, client.id]);
+    } else {
+      setMax.run([1, client.id]);
+    }
+  }
 
+  if (status) {
+    const stmt = db.prepare("update clients set status = ? where id = ?");
+    stmt.run([status, client.id]);
+  }
 
+  // End
 
   return res.status(200).send(clients);
 });
 
 app.listen(3001);
-console.log('app running on port ', 3001);
+console.log("app running on port ", 3001);
-- 
2.23.0

